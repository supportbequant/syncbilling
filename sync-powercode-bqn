#!/usr/bin/python3

################################################################################
#
# Copyright (c) 2022 Bequant S.L.
# All rights reserved.
#
# This product or document is proprietary to and embodies the
# confidential technology of Bequant S.L., Spain.
# Possession, use, duplication or distribution of this product
# or document is authorized only pursuant to a valid written
# license from Bequant S.L.
#
#
################################################################################

import json
import argparse
import json
import datetime

import requests
if not requests.__version__.startswith("1."):
  # Avoid insecure warning when issuing REST queries
  import urllib3
  urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

from BillingSync import BillingSync

################################################################################

class PowercodeSync(BillingSync):

  ############################################################################

  def getEntries(self, server, key, bodyParams):

    url = "https://" + server + ":444/api/1/index.php"
    headers = {
      "Accept": "application/json",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Content-type": "application/json"
    }
    body = {}
    body["apiKey"] = key
    for p in bodyParams:
      body[p] = bodyParams[p]
  
    self.logger.info("POST to %s" % url)
    rsp = requests.post(url, headers=headers, data=self.jsonDumps(body), verify=False)
    self.printResponseDetails(rsp)
    if rsp.status_code != 200:
      raise Exception("Bad query %d" % rsp.status_code)
    rspJson = json.loads(rsp.text)
    return rspJson

  ############################################################################

  def getEquipments(self, server, key, categories):
    equipments = []
    for c in categories:
      equipments += self.getEntries(server, key, {"action": "getEquipmentByCategory", "equipmentCategory": c})
    return equipments

  ############################################################################

  def getCustomers(self, server, key, ids):
    customers = []
    for id in ids:
      customers += self.getEntries(server, key, {"action": "readCustomerService", "customerID": id})
    return customers

################################################################################

if __name__ == "__main__":

  parser = argparse.ArgumentParser(
    description="""
  Synchronizes speed limits in Powercode API with BQN rate policies.

  Requires an API key in Powercode and the REST API enabled in BQN.

  Known limitations:
  - Multiple IP addresses in same contract not supported.
  - Synchronization may take several minutes.
  - If the synchronization fails, no retry is attempted (must be don e externally).
  - No scheduling of script execution (must be done externally).
  """, formatter_class=argparse.RawTextHelpFormatter)

  parser.add_argument('-b', help='BQN address and REST credentials. If absent, no BQN synchromization',
                      nargs=3, metavar=('BQN-IP', 'REST-USER', 'REST-PW'), dest='bqn')
  parser.add_argument('-v', '--verbose', action='count', dest='verbose', default=0,
                    help="Display extra informationt (repeat for increased verbosity)")
  parser.add_argument('-c', '--categories', required=True, type=int, dest="categories", nargs='+', \
      help='Equipment categories')

  parser.add_argument('server', metavar='SERVER', type=str, help='Billing REST server')
  parser.add_argument('key', metavar='KEY', type=str, help='Billing REST API key')
  args = parser.parse_args()

  billingSync = PowercodeSync(args.verbose)

  billingSync.logger.warning("%s synchronization script starts (v1.1)" % datetime.datetime.now())

  equipments = billingSync.getEquipments(args.server, args.key, args.categories)
  #custIds = ["1", "2", "3"]
  #customers = billingSync.getCustomers(args.server, args.key, custIds)

  # TODO: complete rest of sync

  billingSync.logger.warning("%s synchronization script ends" % datetime.datetime.now())



