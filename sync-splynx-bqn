#!/usr/bin/python3

################################################################################
#
# Copyright (c) 2022 Bequant S.L.
# All rights reserved.
#
# This product or document is proprietary to and embodies the
# confidential technology of Bequant S.L., Spain.
# Possession, use, duplication or distribution of this product
# or document is authorized only pursuant to a valid written
# license from Bequant S.L.
#
#
################################################################################

import json
import argparse
import base64
import datetime

import requests
if not requests.__version__.startswith("1."):
  # Avoid insecure warning when issuing REST queries
  import urllib3
  urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

from BillingSync import BillingSync

################################################################################

class SplynxSync(BillingSync):

  ############################################################################

  def getEntries(self, server, key, secret, query):

    url = "https://" + server + "/api/2.0/admin" + query
    credentials = base64.b64encode((key + ":" + secret).encode("utf-8")).decode("utf-8")
    headers = {
    "Authorization": "Basic " + credentials,
    "Accept": "application/json",
    "Accept-Encoding": "gzip, deflate",
    "Connection": "keep-alive"
    }

    self.logger.info("GET to %s" % url)
    rsp = requests.get(url, headers=headers, verify=False)
    self.printResponseDetails(rsp)
    if rsp.status_code != 200:
      raise Exception("Bad query %d" % rsp.status_code)
    rspJson = json.loads(rsp.text)
    return rspJson

  ############################################################################

  def normalizeData(self, tariffs, customers, allCustomers, dualStack, ipv6Mask, idSource):
    data = {'subscribers': [], 'policies': [], "subscriberGroups": []}

    customerHashTable = {}
    for c in allCustomers:
      customerHashTable[c["id"]] = c 

    tariffHashTable = {}
    for t in tariffs:
      tariffHashTable[t["id"]] = t 

    for t in tariffs:
      data["policies"].append({
        "policyName": t["service_name"],
        "policyId": str(t["id"]),
        "rateLimitDownlink": {"rate": int(t["speed_download"])},
        "rateLimitUplink": {"rate": int(t["speed_upload"])}
        })

    for c in customers:
      if not c["tariff_id"] in tariffHashTable:
        self.logger.warning("Tariff %s not found for customer id %s" % (c["tariff_id"], c["customer_id"]))
        continue
      tariff = tariffHashTable[c["tariff_id"]]
      if not c["customer_id"] in customerHashTable:
        self.logger.warning("Customer information not found for id %s" % c["customer_id"])
        continue
      cInfo = customerHashTable[c["customer_id"]]

      data["subscribers"].append({
        "subscriberIp": c["ipv4"],
        "subscriberId": str(cInfo[idSource]),
        "policyRate" : tariff["service_name"],
        "state": cInfo["status"],
        "block": cInfo["status"] != "active"
      })
      if c["ipv6"]:
        if c["ipv6_prefix"] != ipv6Mask:
          self.logger.warning("IPv6 subscriber with mask %d != expected %d" % (c["ipv6_prefix"], ipv6Mask))
        else:
          data["subscribers"].append({
            "subscriberIp": c["ipv6"],
            "subscriberId": str(cInfo[idSource]),
            "policyRate" : tariff["service_name"],
            "state": cInfo["status"],
            "block": cInfo["status"] != "active"
          })
      if dualStack and c["ipv6"]:
        subGroup = {}
        subGroup["subscriberGroupName"] = "DS-%s" % cInfo[idSource]
        subGroup["policyRate"] = tariff["service_name"]
        subGroup["subscriberMembers"] = [c["ipv4"]]
        subGroup["subscriberRanges"] = ["%s/%d" % (c["ipv6"], c["ipv6_prefix"])]
        data["subscriberGroups"].append(subGroup)

    return data

  ############################################################################

  def normalizeSites(self, sites, customers, allCustomers):
    groups = {}
    customerLocations = {}
    for s in sites:
      groups[s["location_id"]] = {
        "subscriberGroupName": "L1-%s" % s["title"],
        "subscriberMembers": [],
        "subscriberRanges": []
        }
    for c in allCustomers:
      customerLocations[c["id"]] = c["location_id"] 
    for c in customers:
      if c["customer_id"] in customerLocations and customerLocations[c["customer_id"]] in groups:
        grp = groups[customerLocations[c["customer_id"]]]
        grp["subscriberMembers"].append(c["ipv4"])
        if c["ipv6"]:
           grp["subscriberRanges"].append("%s/%d" % (c["ipv6"], c["ipv6_prefix"]))
    
    return [ x for x in list(groups.values()) if len(x["subscriberMembers"]) > 0 or len(x["subscriberRanges"]) > 0 ]

################################################################################

if __name__ == "__main__":

  parser = argparse.ArgumentParser(
    description="""
  Synchronizes speed limits in Splynx contracts with BQN rate policies.

  Requires an API KEY and SECRET in Splynx and the REST API enabled in BQN.

  BQN Rate policies are identified by Splynx "tariffs", with spaces replaced by undescores.
  BQN subscribers are identified by Splynx "customers".
  BQN IPs are identified by Splynx "customers-online".
  BQN subscriber groups are obtained from customer "location_id" mapped to "network-sites".

  Customers in status != "active" have their traffic blocked by BQN.

  Known limitations:
  - Multiple IP addresses in same contract not supported.
  - Synchronization may take several minutes.
  - If the synchronization fails, no retry is attempted (must be don e externally).
  - No scheduling of script execution (must be done externally).
  """, formatter_class=argparse.RawTextHelpFormatter)

  parser.add_argument('-b', help='BQN address and REST credentials. If absent, no BQN synchromization',
                      nargs=3, metavar=('BQN-IP', 'REST-USER', 'REST-PW'), dest='bqn')
  parser.add_argument('-v', '--verbose', action='count', dest='verbose', default=0,
                    help="Display extra informationt (repeat for increased verbosity)")
  parser.add_argument('-ds', '--dual-stack', action='store_true', dest="dualStack", default=False, 
      help='Group v4 and v6 IP addresses of same subscriber under same rate limit. Requires BQN R4.22 or later. If absent, no group created')
  parser.add_argument('-msk', '--v6-expected-mask', help='Expected IPv6 mask. 64 by default.',
               type=int, default=64, dest='ipv6Mask')
  parser.add_argument('-ns', '--network-sites', action='store_true', dest="networkSites", default=False, 
      help='Group subscribers based on their network sites. Requires BQN R4.22 or later and customer and network sites view permits. If absent, no group created')
  parser.add_argument('-np', '--no-policies', action='store_true', dest="noPolicies", default=False, 
      help='If present, no policies are retried. False by default')
  parser.add_argument('-id', '--id-source', choices=['name', 'email', 'login'], \
      dest="idSource", default="name", help='Customer field to use as subscriber ID. "name" by default')
  parser.add_argument('server', metavar='SERVER', type=str, help="Billing server")
  parser.add_argument('key', metavar='API-KEY', type=str, help='Billing REST API key')
  parser.add_argument('secret', metavar='SECRET', type=str, help='Billing API secret')

  args = parser.parse_args()

  billingSync = SplynxSync(args.verbose)

  billingSync.logger.warning("%s synchronization script starts (v2.0)" % datetime.datetime.now())

  url = "https://" + args.server + "/api/2.0/admin"
  credentials = base64.b64encode((args.key + ":" + args.secret).encode("utf-8")).decode("utf-8")
  headers = {
   "Authorization": "Basic " + credentials,
   "Accept": "application/json",
   "Accept-Encoding": "gzip, deflate",
   "Connection": "keep-alive"
  }

  customers = billingSync.getEntries(args.server, args.key, args.secret, '/customers/customers-online')
  allCustomers = billingSync.getEntries(args.server, args.key, args.secret, '/customers/customer')

  if args.noPolicies:
    data = {'subscribers': [], 'policies': [], "subscriberGroups": []}
  else:
    tariffs = billingSync.getEntries(args.server, args.key, args.secret, '/tariffs/internet')
    data = billingSync.normalizeData(tariffs, customers, allCustomers, args.dualStack, args.ipv6Mask, args.idSource)

  if args.networkSites:
    sites = billingSync.getEntries(args.server, args.key, args.secret, '/networking/network-sites')
    data["subscriberGroups"] += billingSync.normalizeSites(sites, customers, allCustomers)

  billingSync.printData(data)
  if args.bqn:
    billingSync.updateBqn(args.bqn[0], args.bqn[1], args.bqn[2], data)

  billingSync.logger.warning("%s synchronization script ends" % datetime.datetime.now())
