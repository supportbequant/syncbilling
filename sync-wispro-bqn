#!/usr/bin/python3

################################################################################
#
# Copyright (c) 2022 Bequant S.L.
# All rights reserved.
#
# This product or document is proprietary to and embodies the
# confidential technology of Bequant S.L., Spain.
# Possession, use, duplication or distribution of this product
# or document is authorized only pursuant to a valid written
# license from Bequant S.L.
#
#
################################################################################

import json
import argparse
import datetime

import requests
if not requests.__version__.startswith("1."):
  # Avoid insecure warning when issuing REST queries
  import urllib3
  urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

from BillingSync import BillingSync

################################################################################

class WisproSync(BillingSync):

  ############################################################################

  def getEntries(self, server, key, query):
    url = "https://" + server + "/api/v1" + query
    headers = {
    "Authorization": "%s" % key,
    "Accept": "application/json",
    "Accept-Encoding": "gzip, deflate",
    "Connection": "keep-alive"
    }

    page = 1
    remaining = True
    entries = []

    while remaining:
      self.logger.info("GET to %s, page %d" % (url, page))
      rsp = requests.get(url, headers=headers, params={"page": page, "per_page": 1000}, verify=False)
      self.printResponseDetails(rsp)
      if rsp.status_code != 200:
        raise Exception("Bad query %d (page %d)" % (rsp.status_code, page))
      rspJson = json.loads(rsp.text)
      for e in rspJson["data"]:
        entries.append(e)
      total = rspJson["meta"]["pagination"]["total_records"]
      remaining = (total > len(entries))
      page += 1

    self.logger.info("GET to %s, page %d" % (url, page))
    rsp = requests.get(url, headers=headers, params={"page": page, "per_page": 1000}, verify=False)
    self.printResponseDetails(rsp)

    return entries

  def normalizeData(self, plans, clients, contracts, nodes):
    data = {'subscribers': [], 'policies': []}
    for p in plans:
      data["policies"].append({
        "policyName": p["name"],
        "policyId": str(p["public_id"]),
        "rateLimitDownlink": {"rate": int(p["ceil_down_kbps"])},
        "rateLimitUplink": {"rate": int(p["ceil_up_kbps"])}
        })
    for c in contracts:
      if c["netmask"] != "255.255.255.255":
        self.logger.warning("Contract with multiple IPs not supported (%s, mask %s)" % (c["ip"], c["netmask"]))
        continue
      matches = [x for x in clients if x["id"] == c["client_id"]]
      if len(matches) == 1:
        client = matches[0]
      else:
        self.logger.warning("Client not found (%s)" % c["client_id"])
        continue
      matches = [x for x in plans if x["id"] == c["plan_id"]]
      if len(matches) == 1:
        plan = matches[0]
      else:
        self.logger.warning("Plan not found (%s)" % c["plan_id"])
        continue
      subGroups = []
      if c["node_id"]:
        matches = [x for x in nodes if x["id"] == c["node_id"]]
        if len(matches) == 1:
          subGroups = [ matches[0]["name"] ]
      data["subscribers"].append({
        "subscriberIp": c["ip"],
        "subscriberId": str(client["name"]),
        "policyRate" : plan["name"],
        "block": c["state"] == "disabled",
        "state": c["state"],
        "subscriberGroups": subGroups
      })

    return data

################################################################################

if __name__ == "__main__":

  parser = argparse.ArgumentParser(
    description="""
  Synchronizes speed limits in Wispro contracts with BQN rate policies.

  Requires an API KEY in Wispro and the REST API enabled in BQN.

  BQN Rate policies are identified by Wispro plan "name", with spaces replaced by undescores.
  BQN subscribers are identified by Wispro client "public-id".
  Contracts in status == "disabled" have their traffic blocked by BQN (Wispro_block policy).

  Known limitations:
  - Multiple IP addresses in same contract not supported (netmask must be "255.255.255.255").
  - Synchronization may take several minutes.
  - If the synchronization fails, no retry is attempted (must be don e externally).
  - No scheduling of scriot execution (must be done externally).
  """, formatter_class=argparse.RawTextHelpFormatter)

  parser.add_argument('-b', help='BQN address and REST credentials. If absent, no BQN synchromization',
                      nargs=3, metavar=('BQN-IP', 'REST-USER', 'REST-PW'), dest='bqn')
  parser.add_argument('-v', '--verbose', action='count', dest='verbose', default=0,
                    help="Display extra informationt (repeat for increased verbosity)")
  parser.add_argument('-s', '-server', dest="server", type=str, default="www.cloud.wispro.co",
      help='Billing server (default www.cloud.wispro.co')
  parser.add_argument('key', metavar='API-KEY', type=str, help='Billing REST API key')
  args = parser.parse_args()

  billingSync = WisproSync(args.verbose)

  billingSync.logger.warning("%s synchronization script starts (v1.6)" % datetime.datetime.now())

  plans = billingSync.getEntries(args.server, args.key, '/plans')
  clients = billingSync.getEntries(args.server, args.key, '/clients')
  contracts = billingSync.getEntries(args.server, args.key, '/contracts')
  nodes = billingSync.getEntries(args.server, args.key, '/nodes')

  data = billingSync.normalizeData(plans, clients, contracts, nodes)
  billingSync.printData(data)
  if args.bqn:
    billingSync.updateBqn(args.bqn[0], args.bqn[1], args.bqn[2], data)

  billingSync.logger.warning("%s synchronization script ends" % datetime.datetime.now())
