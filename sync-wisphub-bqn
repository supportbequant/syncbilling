#!/usr/bin/python3

################################################################################
#
# Copyright (c) 2022 Bequant S.L.
# All rights reserved.
#
# This product or document is proprietary to and embodies the
# confidential technology of Bequant S.L., Spain.
# Possession, use, duplication or distribution of this product
# or document is authorized only pursuant to a valid written
# license from Bequant S.L.
#
#
################################################################################

import json
import argparse

import requests
if not requests.__version__.startswith("1."):
  # Avoid insecure warning when issuing REST queries
  import urllib3
  urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

from BillingSync import BillingSync

################################################################################

class WisphubSync(BillingSync):

  ############################################################################

  def getEntries(self, server, key, query):
    url = "https://" + server + "/api" + query
    headers = {
   "Authorization": "Api-Key %s" % key,
   "Accept": "application/json",
   "Accept-Encoding": "gzip, deflate",
   "Connection": "keep-alive"
  }
    offset = 0
    page = 1
    pageSize = 1000
    remaining = True
    entries = []

    while remaining:
      self.logger.info("GET to %s, page %d" % (url, page))
      rsp = requests.get(url, headers=headers, params={"offset": offset, "limit": pageSize}, verify=False)
      self.printResponseDetails(rsp)
      if rsp.status_code != 200:
        raise Exception("Bad query %d (page %d)" % (rsp.status_code, page))
      rspJson = json.loads(rsp.text)
      for e in rspJson["results"]:
        entries.append(e)
      total = rspJson["count"]
      remaining = (total > len(entries))
      offset += pageSize
      page += 1

    return entries

  def normalizeData(self, clients):
    data = {'subscribers': [], 'policies': []}
    for c in clients:
      policyName = c["plan_internet"]["nombre"]
      data["subscribers"].append({
        "subscriberIp": c["ip"],
        "subscriberId": c["nombre"],
        "policyRate" : policyName,
        "block": c["estado"] == "Suspendido",
        "state": c["estado"]
      })
      # No policies created (no rates known in wisphub query)
    return data

################################################################################

if __name__ == "__main__":

  parser = argparse.ArgumentParser(
    description="""
  Synchronizes speed limits in Wisphub clients with BQN rate policies.

  Requires an API KEY in Wisphub and the REST API enabled in BQN.

  BQN Rate policies are identified by Wisphub "plan_internet"->"nombre", with spaces replaced by undescores.
  BQN subscribers are identified by "nombre" in Wisphub.
  Clients in "estado" == "Suspendido" have their traffic blocked by BQN (Wisphub_block policy).

  Known limitations:
  - Policy speed limits cannot be obtained from Wisphub. They must be configured in the BQN.
  - Multiple IP addresses in same client are not supported.
  - The first time it may take minutes to run. Following executions will send to BQN only client changes
    and will be quicker.
  - If the synchronization fails, no retry is attempted (must be done externally).
  - No scheduling of script execution (must be done externally).
  """, formatter_class=argparse.RawTextHelpFormatter)

  parser.add_argument('-b', help='BQN address and REST credentials. If absent, no BQN synchromization',
                      nargs=3, metavar=('BQN-IP', 'REST-USER', 'REST-PW'), dest='bqn')
  parser.add_argument('-v', '--verbose', action='count', dest='verbose', default=0,
                    help="Display extra informationt (repeat for increased verbosity)")
  parser.add_argument('-s', '-server', dest="server", type=str, default="api.wisphub.net",
      help='Billing server (default api.wisphub.net')
  parser.add_argument('key', metavar='API-KEY', type=str, help='Billing REST API key')
  args = parser.parse_args()

  billingSync = WisphubSync(args.verbose)

  clients = billingSync.getEntries(args.server, args.key, '/clientes')

  data = billingSync.normalizeData(clients)
  billingSync.printData(data)
  if args.bqn:
    billingSync.updateBqn(args.bqn[0], args.bqn[1], args.bqn[2], data)








